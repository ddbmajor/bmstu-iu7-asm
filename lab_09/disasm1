
appMNO80387:     file format elf64-x86-64


Disassembly of section .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64 
    1004:	48 83 ec 08          	sub    $0x8,%rsp
    1008:	48 8b 05 d9 2f 00 00 	mov    0x2fd9(%rip),%rax        # 3fe8 <__gmon_start__>
    100f:	48 85 c0             	test   %rax,%rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	callq  *%rax
    1016:	48 83 c4 08          	add    $0x8,%rsp
    101a:	c3                   	retq   

Disassembly of section .plt:

0000000000001020 <.plt>:
    1020:	ff 35 7a 2f 00 00    	pushq  0x2f7a(%rip)        # 3fa0 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	f2 ff 25 7b 2f 00 00 	bnd jmpq *0x2f7b(%rip)        # 3fa8 <_GLOBAL_OFFSET_TABLE_+0x10>
    102d:	0f 1f 00             	nopl   (%rax)
    1030:	f3 0f 1e fa          	endbr64 
    1034:	68 00 00 00 00       	pushq  $0x0
    1039:	f2 e9 e1 ff ff ff    	bnd jmpq 1020 <.plt>
    103f:	90                   	nop
    1040:	f3 0f 1e fa          	endbr64 
    1044:	68 01 00 00 00       	pushq  $0x1
    1049:	f2 e9 d1 ff ff ff    	bnd jmpq 1020 <.plt>
    104f:	90                   	nop
    1050:	f3 0f 1e fa          	endbr64 
    1054:	68 02 00 00 00       	pushq  $0x2
    1059:	f2 e9 c1 ff ff ff    	bnd jmpq 1020 <.plt>
    105f:	90                   	nop
    1060:	f3 0f 1e fa          	endbr64 
    1064:	68 03 00 00 00       	pushq  $0x3
    1069:	f2 e9 b1 ff ff ff    	bnd jmpq 1020 <.plt>
    106f:	90                   	nop
    1070:	f3 0f 1e fa          	endbr64 
    1074:	68 04 00 00 00       	pushq  $0x4
    1079:	f2 e9 a1 ff ff ff    	bnd jmpq 1020 <.plt>
    107f:	90                   	nop

Disassembly of section .plt.got:

0000000000001080 <__cxa_finalize@plt>:
    1080:	f3 0f 1e fa          	endbr64 
    1084:	f2 ff 25 6d 2f 00 00 	bnd jmpq *0x2f6d(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    108b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .plt.sec:

0000000000001090 <puts@plt>:
    1090:	f3 0f 1e fa          	endbr64 
    1094:	f2 ff 25 15 2f 00 00 	bnd jmpq *0x2f15(%rip)        # 3fb0 <puts@GLIBC_2.2.5>
    109b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000010a0 <clock@plt>:
    10a0:	f3 0f 1e fa          	endbr64 
    10a4:	f2 ff 25 0d 2f 00 00 	bnd jmpq *0x2f0d(%rip)        # 3fb8 <clock@GLIBC_2.2.5>
    10ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000010b0 <__stack_chk_fail@plt>:
    10b0:	f3 0f 1e fa          	endbr64 
    10b4:	f2 ff 25 05 2f 00 00 	bnd jmpq *0x2f05(%rip)        # 3fc0 <__stack_chk_fail@GLIBC_2.4>
    10bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000010c0 <printf@plt>:
    10c0:	f3 0f 1e fa          	endbr64 
    10c4:	f2 ff 25 fd 2e 00 00 	bnd jmpq *0x2efd(%rip)        # 3fc8 <printf@GLIBC_2.2.5>
    10cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000010d0 <sin@plt>:
    10d0:	f3 0f 1e fa          	endbr64 
    10d4:	f2 ff 25 f5 2e 00 00 	bnd jmpq *0x2ef5(%rip)        # 3fd0 <sin@GLIBC_2.2.5>
    10db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .text:

00000000000010e0 <_start>:
    10e0:	f3 0f 1e fa          	endbr64 
    10e4:	31 ed                	xor    %ebp,%ebp
    10e6:	49 89 d1             	mov    %rdx,%r9
    10e9:	5e                   	pop    %rsi
    10ea:	48 89 e2             	mov    %rsp,%rdx
    10ed:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    10f1:	50                   	push   %rax
    10f2:	54                   	push   %rsp
    10f3:	4c 8d 05 a6 0b 00 00 	lea    0xba6(%rip),%r8        # 1ca0 <__libc_csu_fini>
    10fa:	48 8d 0d 2f 0b 00 00 	lea    0xb2f(%rip),%rcx        # 1c30 <__libc_csu_init>
    1101:	48 8d 3d e1 07 00 00 	lea    0x7e1(%rip),%rdi        # 18e9 <main>
    1108:	ff 15 d2 2e 00 00    	callq  *0x2ed2(%rip)        # 3fe0 <__libc_start_main@GLIBC_2.2.5>
    110e:	f4                   	hlt    
    110f:	90                   	nop

0000000000001110 <deregister_tm_clones>:
    1110:	48 8d 3d f9 2e 00 00 	lea    0x2ef9(%rip),%rdi        # 4010 <__TMC_END__>
    1117:	48 8d 05 f2 2e 00 00 	lea    0x2ef2(%rip),%rax        # 4010 <__TMC_END__>
    111e:	48 39 f8             	cmp    %rdi,%rax
    1121:	74 15                	je     1138 <deregister_tm_clones+0x28>
    1123:	48 8b 05 ae 2e 00 00 	mov    0x2eae(%rip),%rax        # 3fd8 <_ITM_deregisterTMCloneTable>
    112a:	48 85 c0             	test   %rax,%rax
    112d:	74 09                	je     1138 <deregister_tm_clones+0x28>
    112f:	ff e0                	jmpq   *%rax
    1131:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1138:	c3                   	retq   
    1139:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001140 <register_tm_clones>:
    1140:	48 8d 3d c9 2e 00 00 	lea    0x2ec9(%rip),%rdi        # 4010 <__TMC_END__>
    1147:	48 8d 35 c2 2e 00 00 	lea    0x2ec2(%rip),%rsi        # 4010 <__TMC_END__>
    114e:	48 29 fe             	sub    %rdi,%rsi
    1151:	48 89 f0             	mov    %rsi,%rax
    1154:	48 c1 ee 3f          	shr    $0x3f,%rsi
    1158:	48 c1 f8 03          	sar    $0x3,%rax
    115c:	48 01 c6             	add    %rax,%rsi
    115f:	48 d1 fe             	sar    %rsi
    1162:	74 14                	je     1178 <register_tm_clones+0x38>
    1164:	48 8b 05 85 2e 00 00 	mov    0x2e85(%rip),%rax        # 3ff0 <_ITM_registerTMCloneTable>
    116b:	48 85 c0             	test   %rax,%rax
    116e:	74 08                	je     1178 <register_tm_clones+0x38>
    1170:	ff e0                	jmpq   *%rax
    1172:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1178:	c3                   	retq   
    1179:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001180 <__do_global_dtors_aux>:
    1180:	f3 0f 1e fa          	endbr64 
    1184:	80 3d 85 2e 00 00 00 	cmpb   $0x0,0x2e85(%rip)        # 4010 <__TMC_END__>
    118b:	75 2b                	jne    11b8 <__do_global_dtors_aux+0x38>
    118d:	55                   	push   %rbp
    118e:	48 83 3d 62 2e 00 00 	cmpq   $0x0,0x2e62(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    1195:	00 
    1196:	48 89 e5             	mov    %rsp,%rbp
    1199:	74 0c                	je     11a7 <__do_global_dtors_aux+0x27>
    119b:	48 8b 3d 66 2e 00 00 	mov    0x2e66(%rip),%rdi        # 4008 <__dso_handle>
    11a2:	e8 d9 fe ff ff       	callq  1080 <__cxa_finalize@plt>
    11a7:	e8 64 ff ff ff       	callq  1110 <deregister_tm_clones>
    11ac:	c6 05 5d 2e 00 00 01 	movb   $0x1,0x2e5d(%rip)        # 4010 <__TMC_END__>
    11b3:	5d                   	pop    %rbp
    11b4:	c3                   	retq   
    11b5:	0f 1f 00             	nopl   (%rax)
    11b8:	c3                   	retq   
    11b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000011c0 <frame_dummy>:
    11c0:	f3 0f 1e fa          	endbr64 
    11c4:	e9 77 ff ff ff       	jmpq   1140 <register_tm_clones>

00000000000011c9 <getDoubleSize>:
    11c9:	f3 0f 1e fa          	endbr64 
    11cd:	55                   	push   %rbp
    11ce:	48 89 e5             	mov    %rsp,%rbp
    11d1:	b8 40 00 00 00       	mov    $0x40,%eax
    11d6:	5d                   	pop    %rbp
    11d7:	c3                   	retq   

00000000000011d8 <getDoubleCSum>:
    11d8:	f3 0f 1e fa          	endbr64 
    11dc:	55                   	push   %rbp
    11dd:	48 89 e5             	mov    %rsp,%rbp
    11e0:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
    11e5:	f2 0f 11 4d e0       	movsd  %xmm1,-0x20(%rbp)
    11ea:	f2 0f 10 45 e8       	movsd  -0x18(%rbp),%xmm0
    11ef:	f2 0f 58 45 e0       	addsd  -0x20(%rbp),%xmm0
    11f4:	f2 0f 11 45 f8       	movsd  %xmm0,-0x8(%rbp)
    11f9:	f2 0f 10 45 f8       	movsd  -0x8(%rbp),%xmm0
    11fe:	5d                   	pop    %rbp
    11ff:	c3                   	retq   

0000000000001200 <getDoubleCProd>:
    1200:	f3 0f 1e fa          	endbr64 
    1204:	55                   	push   %rbp
    1205:	48 89 e5             	mov    %rsp,%rbp
    1208:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
    120d:	f2 0f 11 4d e0       	movsd  %xmm1,-0x20(%rbp)
    1212:	f2 0f 10 45 e8       	movsd  -0x18(%rbp),%xmm0
    1217:	f2 0f 59 45 e0       	mulsd  -0x20(%rbp),%xmm0
    121c:	f2 0f 11 45 f8       	movsd  %xmm0,-0x8(%rbp)
    1221:	f2 0f 10 45 f8       	movsd  -0x8(%rbp),%xmm0
    1226:	5d                   	pop    %rbp
    1227:	c3                   	retq   

0000000000001228 <getDoubleAsmSum>:
    1228:	f3 0f 1e fa          	endbr64 
    122c:	55                   	push   %rbp
    122d:	48 89 e5             	mov    %rsp,%rbp
    1230:	48 83 ec 20          	sub    $0x20,%rsp
    1234:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
    1239:	f2 0f 11 4d e0       	movsd  %xmm1,-0x20(%rbp)
    123e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1245:	00 00 
    1247:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    124b:	31 c0                	xor    %eax,%eax
    124d:	dd 45 e8             	fldl   -0x18(%rbp)
    1250:	dd 45 e0             	fldl   -0x20(%rbp)
    1253:	de c1                	faddp  %st,%st(1)
    1255:	dd 5d f0             	fstpl  -0x10(%rbp)
    1258:	f2 0f 10 45 f0       	movsd  -0x10(%rbp),%xmm0
    125d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1261:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    1268:	00 00 
    126a:	74 05                	je     1271 <getDoubleAsmSum+0x49>
    126c:	e8 3f fe ff ff       	callq  10b0 <__stack_chk_fail@plt>
    1271:	c9                   	leaveq 
    1272:	c3                   	retq   

0000000000001273 <getDoubleAsmProd>:
    1273:	f3 0f 1e fa          	endbr64 
    1277:	55                   	push   %rbp
    1278:	48 89 e5             	mov    %rsp,%rbp
    127b:	48 83 ec 20          	sub    $0x20,%rsp
    127f:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
    1284:	f2 0f 11 4d e0       	movsd  %xmm1,-0x20(%rbp)
    1289:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1290:	00 00 
    1292:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    1296:	31 c0                	xor    %eax,%eax
    1298:	dd 45 e8             	fldl   -0x18(%rbp)
    129b:	dd 45 e0             	fldl   -0x20(%rbp)
    129e:	de c9                	fmulp  %st,%st(1)
    12a0:	dd 5d f0             	fstpl  -0x10(%rbp)
    12a3:	f2 0f 10 45 f0       	movsd  -0x10(%rbp),%xmm0
    12a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    12ac:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    12b3:	00 00 
    12b5:	74 05                	je     12bc <getDoubleAsmProd+0x49>
    12b7:	e8 f4 fd ff ff       	callq  10b0 <__stack_chk_fail@plt>
    12bc:	c9                   	leaveq 
    12bd:	c3                   	retq   

00000000000012be <getDoubleFuncTime>:
    12be:	f3 0f 1e fa          	endbr64 
    12c2:	55                   	push   %rbp
    12c3:	48 89 e5             	mov    %rsp,%rbp
    12c6:	48 83 ec 40          	sub    $0x40,%rsp
    12ca:	f2 0f 11 45 d8       	movsd  %xmm0,-0x28(%rbp)
    12cf:	f2 0f 11 4d d0       	movsd  %xmm1,-0x30(%rbp)
    12d4:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    12d8:	e8 c3 fd ff ff       	callq  10a0 <clock@plt>
    12dd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    12e1:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    12e8:	00 
    12e9:	eb 1d                	jmp    1308 <getDoubleFuncTime+0x4a>
    12eb:	f2 0f 10 45 d0       	movsd  -0x30(%rbp),%xmm0
    12f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    12f4:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    12f8:	66 0f 28 c8          	movapd %xmm0,%xmm1
    12fc:	66 48 0f 6e c0       	movq   %rax,%xmm0
    1301:	ff d2                	callq  *%rdx
    1303:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
    1308:	48 81 7d e8 3f 42 0f 	cmpq   $0xf423f,-0x18(%rbp)
    130f:	00 
    1310:	76 d9                	jbe    12eb <getDoubleFuncTime+0x2d>
    1312:	e8 89 fd ff ff       	callq  10a0 <clock@plt>
    1317:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    131b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    131f:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
    1323:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
    1328:	f2 0f 10 0d 70 0d 00 	movsd  0xd70(%rip),%xmm1        # 20a0 <_IO_stdin_used+0xa0>
    132f:	00 
    1330:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
    1334:	f2 0f 10 0d 64 0d 00 	movsd  0xd64(%rip),%xmm1        # 20a0 <_IO_stdin_used+0xa0>
    133b:	00 
    133c:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
    1340:	c9                   	leaveq 
    1341:	c3                   	retq   

0000000000001342 <printDoubleCharacteristics>:
    1342:	f3 0f 1e fa          	endbr64 
    1346:	55                   	push   %rbp
    1347:	48 89 e5             	mov    %rsp,%rbp
    134a:	48 83 ec 20          	sub    $0x20,%rsp
    134e:	f2 0f 10 05 52 0d 00 	movsd  0xd52(%rip),%xmm0        # 20a8 <_IO_stdin_used+0xa8>
    1355:	00 
    1356:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
    135b:	f2 0f 10 05 4d 0d 00 	movsd  0xd4d(%rip),%xmm0        # 20b0 <_IO_stdin_used+0xb0>
    1362:	00 
    1363:	f2 0f 11 45 f8       	movsd  %xmm0,-0x8(%rbp)
    1368:	48 8d 3d 99 0c 00 00 	lea    0xc99(%rip),%rdi        # 2008 <_IO_stdin_used+0x8>
    136f:	e8 1c fd ff ff       	callq  1090 <puts@plt>
    1374:	e8 50 fe ff ff       	callq  11c9 <getDoubleSize>
    1379:	89 c6                	mov    %eax,%esi
    137b:	48 8d 3d 8d 0c 00 00 	lea    0xc8d(%rip),%rdi        # 200f <_IO_stdin_used+0xf>
    1382:	b8 00 00 00 00       	mov    $0x0,%eax
    1387:	e8 34 fd ff ff       	callq  10c0 <printf@plt>
    138c:	f2 0f 10 45 f8       	movsd  -0x8(%rbp),%xmm0
    1391:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1395:	66 0f 28 c8          	movapd %xmm0,%xmm1
    1399:	66 48 0f 6e c0       	movq   %rax,%xmm0
    139e:	e8 35 fe ff ff       	callq  11d8 <getDoubleCSum>
    13a3:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
    13a8:	f2 0f 10 45 f8       	movsd  -0x8(%rbp),%xmm0
    13ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    13b1:	48 8d 3d 20 fe ff ff 	lea    -0x1e0(%rip),%rdi        # 11d8 <getDoubleCSum>
    13b8:	66 0f 28 c8          	movapd %xmm0,%xmm1
    13bc:	66 48 0f 6e c0       	movq   %rax,%xmm0
    13c1:	e8 f8 fe ff ff       	callq  12be <getDoubleFuncTime>
    13c6:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
    13cb:	48 8d 3d 50 0c 00 00 	lea    0xc50(%rip),%rdi        # 2022 <_IO_stdin_used+0x22>
    13d2:	b8 02 00 00 00       	mov    $0x2,%eax
    13d7:	e8 e4 fc ff ff       	callq  10c0 <printf@plt>
    13dc:	f2 0f 10 45 f8       	movsd  -0x8(%rbp),%xmm0
    13e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    13e5:	66 0f 28 c8          	movapd %xmm0,%xmm1
    13e9:	66 48 0f 6e c0       	movq   %rax,%xmm0
    13ee:	e8 35 fe ff ff       	callq  1228 <getDoubleAsmSum>
    13f3:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
    13f8:	f2 0f 10 45 f8       	movsd  -0x8(%rbp),%xmm0
    13fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1401:	48 8d 3d 20 fe ff ff 	lea    -0x1e0(%rip),%rdi        # 1228 <getDoubleAsmSum>
    1408:	66 0f 28 c8          	movapd %xmm0,%xmm1
    140c:	66 48 0f 6e c0       	movq   %rax,%xmm0
    1411:	e8 a8 fe ff ff       	callq  12be <getDoubleFuncTime>
    1416:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
    141b:	48 8d 3d 1e 0c 00 00 	lea    0xc1e(%rip),%rdi        # 2040 <_IO_stdin_used+0x40>
    1422:	b8 02 00 00 00       	mov    $0x2,%eax
    1427:	e8 94 fc ff ff       	callq  10c0 <printf@plt>
    142c:	f2 0f 10 05 84 0c 00 	movsd  0xc84(%rip),%xmm0        # 20b8 <_IO_stdin_used+0xb8>
    1433:	00 
    1434:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
    1439:	f2 0f 10 05 7f 0c 00 	movsd  0xc7f(%rip),%xmm0        # 20c0 <_IO_stdin_used+0xc0>
    1440:	00 
    1441:	f2 0f 11 45 f8       	movsd  %xmm0,-0x8(%rbp)
    1446:	f2 0f 10 45 f8       	movsd  -0x8(%rbp),%xmm0
    144b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    144f:	66 0f 28 c8          	movapd %xmm0,%xmm1
    1453:	66 48 0f 6e c0       	movq   %rax,%xmm0
    1458:	e8 a3 fd ff ff       	callq  1200 <getDoubleCProd>
    145d:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
    1462:	f2 0f 10 45 f8       	movsd  -0x8(%rbp),%xmm0
    1467:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    146b:	48 8d 3d 8e fd ff ff 	lea    -0x272(%rip),%rdi        # 1200 <getDoubleCProd>
    1472:	66 0f 28 c8          	movapd %xmm0,%xmm1
    1476:	66 48 0f 6e c0       	movq   %rax,%xmm0
    147b:	e8 3e fe ff ff       	callq  12be <getDoubleFuncTime>
    1480:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
    1485:	48 8d 3d d2 0b 00 00 	lea    0xbd2(%rip),%rdi        # 205e <_IO_stdin_used+0x5e>
    148c:	b8 02 00 00 00       	mov    $0x2,%eax
    1491:	e8 2a fc ff ff       	callq  10c0 <printf@plt>
    1496:	f2 0f 10 45 f8       	movsd  -0x8(%rbp),%xmm0
    149b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    149f:	66 0f 28 c8          	movapd %xmm0,%xmm1
    14a3:	66 48 0f 6e c0       	movq   %rax,%xmm0
    14a8:	e8 c6 fd ff ff       	callq  1273 <getDoubleAsmProd>
    14ad:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
    14b2:	f2 0f 10 45 f8       	movsd  -0x8(%rbp),%xmm0
    14b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    14bb:	48 8d 3d b1 fd ff ff 	lea    -0x24f(%rip),%rdi        # 1273 <getDoubleAsmProd>
    14c2:	66 0f 28 c8          	movapd %xmm0,%xmm1
    14c6:	66 48 0f 6e c0       	movq   %rax,%xmm0
    14cb:	e8 ee fd ff ff       	callq  12be <getDoubleFuncTime>
    14d0:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
    14d5:	48 8d 3d a0 0b 00 00 	lea    0xba0(%rip),%rdi        # 207c <_IO_stdin_used+0x7c>
    14dc:	b8 02 00 00 00       	mov    $0x2,%eax
    14e1:	e8 da fb ff ff       	callq  10c0 <printf@plt>
    14e6:	90                   	nop
    14e7:	c9                   	leaveq 
    14e8:	c3                   	retq   

00000000000014e9 <getLongDoubleSize>:
    14e9:	f3 0f 1e fa          	endbr64 
    14ed:	55                   	push   %rbp
    14ee:	48 89 e5             	mov    %rsp,%rbp
    14f1:	b8 80 00 00 00       	mov    $0x80,%eax
    14f6:	5d                   	pop    %rbp
    14f7:	c3                   	retq   

00000000000014f8 <getLongDoubleCSum>:
    14f8:	f3 0f 1e fa          	endbr64 
    14fc:	55                   	push   %rbp
    14fd:	48 89 e5             	mov    %rsp,%rbp
    1500:	db 6d 10             	fldt   0x10(%rbp)
    1503:	db 6d 20             	fldt   0x20(%rbp)
    1506:	de c1                	faddp  %st,%st(1)
    1508:	db 7d f0             	fstpt  -0x10(%rbp)
    150b:	db 6d f0             	fldt   -0x10(%rbp)
    150e:	5d                   	pop    %rbp
    150f:	c3                   	retq   

0000000000001510 <getLongDoubleCProd>:
    1510:	f3 0f 1e fa          	endbr64 
    1514:	55                   	push   %rbp
    1515:	48 89 e5             	mov    %rsp,%rbp
    1518:	db 6d 10             	fldt   0x10(%rbp)
    151b:	db 6d 20             	fldt   0x20(%rbp)
    151e:	de c9                	fmulp  %st,%st(1)
    1520:	db 7d f0             	fstpt  -0x10(%rbp)
    1523:	db 6d f0             	fldt   -0x10(%rbp)
    1526:	5d                   	pop    %rbp
    1527:	c3                   	retq   

0000000000001528 <getLongDoubleAsmSum>:
    1528:	f3 0f 1e fa          	endbr64 
    152c:	55                   	push   %rbp
    152d:	48 89 e5             	mov    %rsp,%rbp
    1530:	48 83 ec 20          	sub    $0x20,%rsp
    1534:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    153b:	00 00 
    153d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    1541:	31 c0                	xor    %eax,%eax
    1543:	db 6d 10             	fldt   0x10(%rbp)
    1546:	db 6d 20             	fldt   0x20(%rbp)
    1549:	de c1                	faddp  %st,%st(1)
    154b:	db 7d e0             	fstpt  -0x20(%rbp)
    154e:	db 6d e0             	fldt   -0x20(%rbp)
    1551:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1555:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    155c:	00 00 
    155e:	74 07                	je     1567 <getLongDoubleAsmSum+0x3f>
    1560:	dd d8                	fstp   %st(0)
    1562:	e8 49 fb ff ff       	callq  10b0 <__stack_chk_fail@plt>
    1567:	c9                   	leaveq 
    1568:	c3                   	retq   

0000000000001569 <getLongDoubleAsmProd>:
    1569:	f3 0f 1e fa          	endbr64 
    156d:	55                   	push   %rbp
    156e:	48 89 e5             	mov    %rsp,%rbp
    1571:	48 83 ec 20          	sub    $0x20,%rsp
    1575:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    157c:	00 00 
    157e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    1582:	31 c0                	xor    %eax,%eax
    1584:	db 6d 10             	fldt   0x10(%rbp)
    1587:	db 6d 20             	fldt   0x20(%rbp)
    158a:	de c9                	fmulp  %st,%st(1)
    158c:	db 7d e0             	fstpt  -0x20(%rbp)
    158f:	db 6d e0             	fldt   -0x20(%rbp)
    1592:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1596:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    159d:	00 00 
    159f:	74 07                	je     15a8 <getLongDoubleAsmProd+0x3f>
    15a1:	dd d8                	fstp   %st(0)
    15a3:	e8 08 fb ff ff       	callq  10b0 <__stack_chk_fail@plt>
    15a8:	c9                   	leaveq 
    15a9:	c3                   	retq   

00000000000015aa <getLongDoubleFuncTime>:
    15aa:	f3 0f 1e fa          	endbr64 
    15ae:	55                   	push   %rbp
    15af:	48 89 e5             	mov    %rsp,%rbp
    15b2:	48 83 ec 30          	sub    $0x30,%rsp
    15b6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    15ba:	e8 e1 fa ff ff       	callq  10a0 <clock@plt>
    15bf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    15c3:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    15ca:	00 
    15cb:	eb 1d                	jmp    15ea <getLongDoubleFuncTime+0x40>
    15cd:	ff 75 28             	pushq  0x28(%rbp)
    15d0:	ff 75 20             	pushq  0x20(%rbp)
    15d3:	ff 75 18             	pushq  0x18(%rbp)
    15d6:	ff 75 10             	pushq  0x10(%rbp)
    15d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    15dd:	ff d0                	callq  *%rax
    15df:	dd d8                	fstp   %st(0)
    15e1:	48 83 c4 20          	add    $0x20,%rsp
    15e5:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
    15ea:	48 81 7d e8 3f 42 0f 	cmpq   $0xf423f,-0x18(%rbp)
    15f1:	00 
    15f2:	76 d9                	jbe    15cd <getLongDoubleFuncTime+0x23>
    15f4:	e8 a7 fa ff ff       	callq  10a0 <clock@plt>
    15f9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    15fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1601:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
    1605:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
    160a:	f2 0f 10 0d 5e 0b 00 	movsd  0xb5e(%rip),%xmm1        # 2170 <_IO_stdin_used+0x170>
    1611:	00 
    1612:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
    1616:	f2 0f 10 0d 52 0b 00 	movsd  0xb52(%rip),%xmm1        # 2170 <_IO_stdin_used+0x170>
    161d:	00 
    161e:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
    1622:	c9                   	leaveq 
    1623:	c3                   	retq   

0000000000001624 <printLongDoubleCharacteristics>:
    1624:	f3 0f 1e fa          	endbr64 
    1628:	55                   	push   %rbp
    1629:	48 89 e5             	mov    %rsp,%rbp
    162c:	48 83 ec 30          	sub    $0x30,%rsp
    1630:	48 8d 3d 99 0a 00 00 	lea    0xa99(%rip),%rdi        # 20d0 <_IO_stdin_used+0xd0>
    1637:	e8 54 fa ff ff       	callq  1090 <puts@plt>
    163c:	db 2d 3e 0b 00 00    	fldt   0xb3e(%rip)        # 2180 <_IO_stdin_used+0x180>
    1642:	db 7d e0             	fstpt  -0x20(%rbp)
    1645:	db 2d 45 0b 00 00    	fldt   0xb45(%rip)        # 2190 <_IO_stdin_used+0x190>
    164b:	db 7d f0             	fstpt  -0x10(%rbp)
    164e:	e8 96 fe ff ff       	callq  14e9 <getLongDoubleSize>
    1653:	89 c6                	mov    %eax,%esi
    1655:	48 8d 3d 80 0a 00 00 	lea    0xa80(%rip),%rdi        # 20dc <_IO_stdin_used+0xdc>
    165c:	b8 00 00 00 00       	mov    $0x0,%eax
    1661:	e8 5a fa ff ff       	callq  10c0 <printf@plt>
    1666:	ff 75 f8             	pushq  -0x8(%rbp)
    1669:	ff 75 f0             	pushq  -0x10(%rbp)
    166c:	ff 75 e8             	pushq  -0x18(%rbp)
    166f:	ff 75 e0             	pushq  -0x20(%rbp)
    1672:	e8 81 fe ff ff       	callq  14f8 <getLongDoubleCSum>
    1677:	48 83 c4 20          	add    $0x20,%rsp
    167b:	db 7d d0             	fstpt  -0x30(%rbp)
    167e:	ff 75 f8             	pushq  -0x8(%rbp)
    1681:	ff 75 f0             	pushq  -0x10(%rbp)
    1684:	ff 75 e8             	pushq  -0x18(%rbp)
    1687:	ff 75 e0             	pushq  -0x20(%rbp)
    168a:	48 8d 3d 67 fe ff ff 	lea    -0x199(%rip),%rdi        # 14f8 <getLongDoubleCSum>
    1691:	e8 14 ff ff ff       	callq  15aa <getLongDoubleFuncTime>
    1696:	48 83 c4 20          	add    $0x20,%rsp
    169a:	ff 75 d8             	pushq  -0x28(%rbp)
    169d:	ff 75 d0             	pushq  -0x30(%rbp)
    16a0:	48 8d 3d 49 0a 00 00 	lea    0xa49(%rip),%rdi        # 20f0 <_IO_stdin_used+0xf0>
    16a7:	b8 01 00 00 00       	mov    $0x1,%eax
    16ac:	e8 0f fa ff ff       	callq  10c0 <printf@plt>
    16b1:	48 83 c4 10          	add    $0x10,%rsp
    16b5:	ff 75 f8             	pushq  -0x8(%rbp)
    16b8:	ff 75 f0             	pushq  -0x10(%rbp)
    16bb:	ff 75 e8             	pushq  -0x18(%rbp)
    16be:	ff 75 e0             	pushq  -0x20(%rbp)
    16c1:	e8 62 fe ff ff       	callq  1528 <getLongDoubleAsmSum>
    16c6:	48 83 c4 20          	add    $0x20,%rsp
    16ca:	db 7d d0             	fstpt  -0x30(%rbp)
    16cd:	ff 75 f8             	pushq  -0x8(%rbp)
    16d0:	ff 75 f0             	pushq  -0x10(%rbp)
    16d3:	ff 75 e8             	pushq  -0x18(%rbp)
    16d6:	ff 75 e0             	pushq  -0x20(%rbp)
    16d9:	48 8d 3d 48 fe ff ff 	lea    -0x1b8(%rip),%rdi        # 1528 <getLongDoubleAsmSum>
    16e0:	e8 c5 fe ff ff       	callq  15aa <getLongDoubleFuncTime>
    16e5:	48 83 c4 20          	add    $0x20,%rsp
    16e9:	ff 75 d8             	pushq  -0x28(%rbp)
    16ec:	ff 75 d0             	pushq  -0x30(%rbp)
    16ef:	48 8d 3d 1a 0a 00 00 	lea    0xa1a(%rip),%rdi        # 2110 <_IO_stdin_used+0x110>
    16f6:	b8 01 00 00 00       	mov    $0x1,%eax
    16fb:	e8 c0 f9 ff ff       	callq  10c0 <printf@plt>
    1700:	48 83 c4 10          	add    $0x10,%rsp
    1704:	ff 75 f8             	pushq  -0x8(%rbp)
    1707:	ff 75 f0             	pushq  -0x10(%rbp)
    170a:	ff 75 e8             	pushq  -0x18(%rbp)
    170d:	ff 75 e0             	pushq  -0x20(%rbp)
    1710:	e8 fb fd ff ff       	callq  1510 <getLongDoubleCProd>
    1715:	48 83 c4 20          	add    $0x20,%rsp
    1719:	db 7d d0             	fstpt  -0x30(%rbp)
    171c:	ff 75 f8             	pushq  -0x8(%rbp)
    171f:	ff 75 f0             	pushq  -0x10(%rbp)
    1722:	ff 75 e8             	pushq  -0x18(%rbp)
    1725:	ff 75 e0             	pushq  -0x20(%rbp)
    1728:	48 8d 3d e1 fd ff ff 	lea    -0x21f(%rip),%rdi        # 1510 <getLongDoubleCProd>
    172f:	e8 76 fe ff ff       	callq  15aa <getLongDoubleFuncTime>
    1734:	48 83 c4 20          	add    $0x20,%rsp
    1738:	ff 75 d8             	pushq  -0x28(%rbp)
    173b:	ff 75 d0             	pushq  -0x30(%rbp)
    173e:	48 8d 3d eb 09 00 00 	lea    0x9eb(%rip),%rdi        # 2130 <_IO_stdin_used+0x130>
    1745:	b8 01 00 00 00       	mov    $0x1,%eax
    174a:	e8 71 f9 ff ff       	callq  10c0 <printf@plt>
    174f:	48 83 c4 10          	add    $0x10,%rsp
    1753:	ff 75 f8             	pushq  -0x8(%rbp)
    1756:	ff 75 f0             	pushq  -0x10(%rbp)
    1759:	ff 75 e8             	pushq  -0x18(%rbp)
    175c:	ff 75 e0             	pushq  -0x20(%rbp)
    175f:	e8 05 fe ff ff       	callq  1569 <getLongDoubleAsmProd>
    1764:	48 83 c4 20          	add    $0x20,%rsp
    1768:	db 7d d0             	fstpt  -0x30(%rbp)
    176b:	ff 75 f8             	pushq  -0x8(%rbp)
    176e:	ff 75 f0             	pushq  -0x10(%rbp)
    1771:	ff 75 e8             	pushq  -0x18(%rbp)
    1774:	ff 75 e0             	pushq  -0x20(%rbp)
    1777:	48 8d 3d eb fd ff ff 	lea    -0x215(%rip),%rdi        # 1569 <getLongDoubleAsmProd>
    177e:	e8 27 fe ff ff       	callq  15aa <getLongDoubleFuncTime>
    1783:	48 83 c4 20          	add    $0x20,%rsp
    1787:	ff 75 d8             	pushq  -0x28(%rbp)
    178a:	ff 75 d0             	pushq  -0x30(%rbp)
    178d:	48 8d 3d bc 09 00 00 	lea    0x9bc(%rip),%rdi        # 2150 <_IO_stdin_used+0x150>
    1794:	b8 01 00 00 00       	mov    $0x1,%eax
    1799:	e8 22 f9 ff ff       	callq  10c0 <printf@plt>
    179e:	48 83 c4 10          	add    $0x10,%rsp
    17a2:	90                   	nop
    17a3:	c9                   	leaveq 
    17a4:	c3                   	retq   

00000000000017a5 <getFPUPi>:
    17a5:	f3 0f 1e fa          	endbr64 
    17a9:	55                   	push   %rbp
    17aa:	48 89 e5             	mov    %rsp,%rbp
    17ad:	48 83 ec 10          	sub    $0x10,%rsp
    17b1:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    17b8:	00 00 
    17ba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    17be:	31 c0                	xor    %eax,%eax
    17c0:	d9 eb                	fldpi  
    17c2:	dd 5d f0             	fstpl  -0x10(%rbp)
    17c5:	f2 0f 10 45 f0       	movsd  -0x10(%rbp),%xmm0
    17ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    17ce:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    17d5:	00 00 
    17d7:	74 05                	je     17de <getFPUPi+0x39>
    17d9:	e8 d2 f8 ff ff       	callq  10b0 <__stack_chk_fail@plt>
    17de:	c9                   	leaveq 
    17df:	c3                   	retq   

00000000000017e0 <printSinCharacteristics>:
    17e0:	f3 0f 1e fa          	endbr64 
    17e4:	55                   	push   %rbp
    17e5:	48 89 e5             	mov    %rsp,%rbp
    17e8:	48 83 ec 10          	sub    $0x10,%rsp
    17ec:	48 8d 3d ad 09 00 00 	lea    0x9ad(%rip),%rdi        # 21a0 <_IO_stdin_used+0x1a0>
    17f3:	e8 98 f8 ff ff       	callq  1090 <puts@plt>
    17f8:	48 8b 05 09 0a 00 00 	mov    0xa09(%rip),%rax        # 2208 <_IO_stdin_used+0x208>
    17ff:	66 48 0f 6e c0       	movq   %rax,%xmm0
    1804:	48 8d 3d 9d 09 00 00 	lea    0x99d(%rip),%rdi        # 21a8 <_IO_stdin_used+0x1a8>
    180b:	b8 01 00 00 00       	mov    $0x1,%eax
    1810:	e8 ab f8 ff ff       	callq  10c0 <printf@plt>
    1815:	48 8b 05 f4 09 00 00 	mov    0x9f4(%rip),%rax        # 2210 <_IO_stdin_used+0x210>
    181c:	66 48 0f 6e c0       	movq   %rax,%xmm0
    1821:	48 8d 3d 9d 09 00 00 	lea    0x99d(%rip),%rdi        # 21c5 <_IO_stdin_used+0x1c5>
    1828:	b8 01 00 00 00       	mov    $0x1,%eax
    182d:	e8 8e f8 ff ff       	callq  10c0 <printf@plt>
    1832:	e8 6e ff ff ff       	callq  17a5 <getFPUPi>
    1837:	66 48 0f 7e c0       	movq   %xmm0,%rax
    183c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    1840:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1844:	66 48 0f 6e c0       	movq   %rax,%xmm0
    1849:	e8 82 f8 ff ff       	callq  10d0 <sin@plt>
    184e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1852:	66 0f 28 c8          	movapd %xmm0,%xmm1
    1856:	66 48 0f 6e c0       	movq   %rax,%xmm0
    185b:	48 8d 3d 80 09 00 00 	lea    0x980(%rip),%rdi        # 21e2 <_IO_stdin_used+0x1e2>
    1862:	b8 02 00 00 00       	mov    $0x2,%eax
    1867:	e8 54 f8 ff ff       	callq  10c0 <printf@plt>
    186c:	48 8d 3d 82 09 00 00 	lea    0x982(%rip),%rdi        # 21f5 <_IO_stdin_used+0x1f5>
    1873:	e8 18 f8 ff ff       	callq  1090 <puts@plt>
    1878:	48 8b 05 99 09 00 00 	mov    0x999(%rip),%rax        # 2218 <_IO_stdin_used+0x218>
    187f:	66 48 0f 6e c0       	movq   %rax,%xmm0
    1884:	48 8d 3d 1d 09 00 00 	lea    0x91d(%rip),%rdi        # 21a8 <_IO_stdin_used+0x1a8>
    188b:	b8 01 00 00 00       	mov    $0x1,%eax
    1890:	e8 2b f8 ff ff       	callq  10c0 <printf@plt>
    1895:	48 8b 05 84 09 00 00 	mov    0x984(%rip),%rax        # 2220 <_IO_stdin_used+0x220>
    189c:	66 48 0f 6e c0       	movq   %rax,%xmm0
    18a1:	48 8d 3d 1d 09 00 00 	lea    0x91d(%rip),%rdi        # 21c5 <_IO_stdin_used+0x1c5>
    18a8:	b8 01 00 00 00       	mov    $0x1,%eax
    18ad:	e8 0e f8 ff ff       	callq  10c0 <printf@plt>
    18b2:	f2 0f 10 45 f8       	movsd  -0x8(%rbp),%xmm0
    18b7:	f2 0f 10 0d 69 09 00 	movsd  0x969(%rip),%xmm1        # 2228 <_IO_stdin_used+0x228>
    18be:	00 
    18bf:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
    18c3:	e8 08 f8 ff ff       	callq  10d0 <sin@plt>
    18c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    18cc:	66 0f 28 c8          	movapd %xmm0,%xmm1
    18d0:	66 48 0f 6e c0       	movq   %rax,%xmm0
    18d5:	48 8d 3d 06 09 00 00 	lea    0x906(%rip),%rdi        # 21e2 <_IO_stdin_used+0x1e2>
    18dc:	b8 02 00 00 00       	mov    $0x2,%eax
    18e1:	e8 da f7 ff ff       	callq  10c0 <printf@plt>
    18e6:	90                   	nop
    18e7:	c9                   	leaveq 
    18e8:	c3                   	retq   

00000000000018e9 <main>:
    18e9:	f3 0f 1e fa          	endbr64 
    18ed:	55                   	push   %rbp
    18ee:	48 89 e5             	mov    %rsp,%rbp
    18f1:	b8 00 00 00 00       	mov    $0x0,%eax
    18f6:	e8 96 01 00 00       	callq  1a91 <printFloatCharacteristics>
    18fb:	b8 00 00 00 00       	mov    $0x0,%eax
    1900:	e8 3d fa ff ff       	callq  1342 <printDoubleCharacteristics>
    1905:	b8 00 00 00 00       	mov    $0x0,%eax
    190a:	e8 15 fd ff ff       	callq  1624 <printLongDoubleCharacteristics>
    190f:	e8 cc fe ff ff       	callq  17e0 <printSinCharacteristics>
    1914:	b8 00 00 00 00       	mov    $0x0,%eax
    1919:	5d                   	pop    %rbp
    191a:	c3                   	retq   

000000000000191b <getFloatSize>:
    191b:	f3 0f 1e fa          	endbr64 
    191f:	55                   	push   %rbp
    1920:	48 89 e5             	mov    %rsp,%rbp
    1923:	b8 20 00 00 00       	mov    $0x20,%eax
    1928:	5d                   	pop    %rbp
    1929:	c3                   	retq   

000000000000192a <getFloatCSum>:
    192a:	f3 0f 1e fa          	endbr64 
    192e:	55                   	push   %rbp
    192f:	48 89 e5             	mov    %rsp,%rbp
    1932:	f3 0f 11 45 ec       	movss  %xmm0,-0x14(%rbp)
    1937:	f3 0f 11 4d e8       	movss  %xmm1,-0x18(%rbp)
    193c:	f3 0f 10 45 ec       	movss  -0x14(%rbp),%xmm0
    1941:	f3 0f 58 45 e8       	addss  -0x18(%rbp),%xmm0
    1946:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
    194b:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
    1950:	5d                   	pop    %rbp
    1951:	c3                   	retq   

0000000000001952 <getFloatCProd>:
    1952:	f3 0f 1e fa          	endbr64 
    1956:	55                   	push   %rbp
    1957:	48 89 e5             	mov    %rsp,%rbp
    195a:	f3 0f 11 45 ec       	movss  %xmm0,-0x14(%rbp)
    195f:	f3 0f 11 4d e8       	movss  %xmm1,-0x18(%rbp)
    1964:	f3 0f 10 45 ec       	movss  -0x14(%rbp),%xmm0
    1969:	f3 0f 59 45 e8       	mulss  -0x18(%rbp),%xmm0
    196e:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
    1973:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
    1978:	5d                   	pop    %rbp
    1979:	c3                   	retq   

000000000000197a <getFloatAsmSum>:
    197a:	f3 0f 1e fa          	endbr64 
    197e:	55                   	push   %rbp
    197f:	48 89 e5             	mov    %rsp,%rbp
    1982:	48 83 ec 20          	sub    $0x20,%rsp
    1986:	f3 0f 11 45 ec       	movss  %xmm0,-0x14(%rbp)
    198b:	f3 0f 11 4d e8       	movss  %xmm1,-0x18(%rbp)
    1990:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1997:	00 00 
    1999:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    199d:	31 c0                	xor    %eax,%eax
    199f:	d9 45 ec             	flds   -0x14(%rbp)
    19a2:	d9 45 e8             	flds   -0x18(%rbp)
    19a5:	de c1                	faddp  %st,%st(1)
    19a7:	d9 5d f4             	fstps  -0xc(%rbp)
    19aa:	f3 0f 10 45 f4       	movss  -0xc(%rbp),%xmm0
    19af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    19b3:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    19ba:	00 00 
    19bc:	74 05                	je     19c3 <getFloatAsmSum+0x49>
    19be:	e8 ed f6 ff ff       	callq  10b0 <__stack_chk_fail@plt>
    19c3:	c9                   	leaveq 
    19c4:	c3                   	retq   

00000000000019c5 <getFloatAsmProd>:
    19c5:	f3 0f 1e fa          	endbr64 
    19c9:	55                   	push   %rbp
    19ca:	48 89 e5             	mov    %rsp,%rbp
    19cd:	48 83 ec 20          	sub    $0x20,%rsp
    19d1:	f3 0f 11 45 ec       	movss  %xmm0,-0x14(%rbp)
    19d6:	f3 0f 11 4d e8       	movss  %xmm1,-0x18(%rbp)
    19db:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    19e2:	00 00 
    19e4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    19e8:	31 c0                	xor    %eax,%eax
    19ea:	d9 45 ec             	flds   -0x14(%rbp)
    19ed:	d9 45 e8             	flds   -0x18(%rbp)
    19f0:	de c9                	fmulp  %st,%st(1)
    19f2:	d9 5d f4             	fstps  -0xc(%rbp)
    19f5:	f3 0f 10 45 f4       	movss  -0xc(%rbp),%xmm0
    19fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    19fe:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    1a05:	00 00 
    1a07:	74 05                	je     1a0e <getFloatAsmProd+0x49>
    1a09:	e8 a2 f6 ff ff       	callq  10b0 <__stack_chk_fail@plt>
    1a0e:	c9                   	leaveq 
    1a0f:	c3                   	retq   

0000000000001a10 <getFloatFuncTime>:
    1a10:	f3 0f 1e fa          	endbr64 
    1a14:	55                   	push   %rbp
    1a15:	48 89 e5             	mov    %rsp,%rbp
    1a18:	48 83 ec 30          	sub    $0x30,%rsp
    1a1c:	f3 0f 11 45 dc       	movss  %xmm0,-0x24(%rbp)
    1a21:	f3 0f 11 4d d8       	movss  %xmm1,-0x28(%rbp)
    1a26:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
    1a2a:	e8 71 f6 ff ff       	callq  10a0 <clock@plt>
    1a2f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    1a33:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    1a3a:	00 
    1a3b:	eb 1a                	jmp    1a57 <getFloatFuncTime+0x47>
    1a3d:	f3 0f 10 45 d8       	movss  -0x28(%rbp),%xmm0
    1a42:	8b 45 dc             	mov    -0x24(%rbp),%eax
    1a45:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    1a49:	0f 28 c8             	movaps %xmm0,%xmm1
    1a4c:	66 0f 6e c0          	movd   %eax,%xmm0
    1a50:	ff d2                	callq  *%rdx
    1a52:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
    1a57:	48 81 7d e8 3f 42 0f 	cmpq   $0xf423f,-0x18(%rbp)
    1a5e:	00 
    1a5f:	76 dc                	jbe    1a3d <getFloatFuncTime+0x2d>
    1a61:	e8 3a f6 ff ff       	callq  10a0 <clock@plt>
    1a66:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    1a6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1a6e:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
    1a72:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
    1a77:	f2 0f 10 0d 49 08 00 	movsd  0x849(%rip),%xmm1        # 22c8 <_IO_stdin_used+0x2c8>
    1a7e:	00 
    1a7f:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
    1a83:	f2 0f 10 0d 3d 08 00 	movsd  0x83d(%rip),%xmm1        # 22c8 <_IO_stdin_used+0x2c8>
    1a8a:	00 
    1a8b:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
    1a8f:	c9                   	leaveq 
    1a90:	c3                   	retq   

0000000000001a91 <printFloatCharacteristics>:
    1a91:	f3 0f 1e fa          	endbr64 
    1a95:	55                   	push   %rbp
    1a96:	48 89 e5             	mov    %rsp,%rbp
    1a99:	48 83 ec 20          	sub    $0x20,%rsp
    1a9d:	f3 0f 10 05 2b 08 00 	movss  0x82b(%rip),%xmm0        # 22d0 <_IO_stdin_used+0x2d0>
    1aa4:	00 
    1aa5:	f3 0f 11 45 f8       	movss  %xmm0,-0x8(%rbp)
    1aaa:	f3 0f 10 05 22 08 00 	movss  0x822(%rip),%xmm0        # 22d4 <_IO_stdin_used+0x2d4>
    1ab1:	00 
    1ab2:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
    1ab7:	48 8d 3d 72 07 00 00 	lea    0x772(%rip),%rdi        # 2230 <_IO_stdin_used+0x230>
    1abe:	e8 cd f5 ff ff       	callq  1090 <puts@plt>
    1ac3:	e8 53 fe ff ff       	callq  191b <getFloatSize>
    1ac8:	89 c6                	mov    %eax,%esi
    1aca:	48 8d 3d 65 07 00 00 	lea    0x765(%rip),%rdi        # 2236 <_IO_stdin_used+0x236>
    1ad1:	b8 00 00 00 00       	mov    $0x0,%eax
    1ad6:	e8 e5 f5 ff ff       	callq  10c0 <printf@plt>
    1adb:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
    1ae0:	8b 45 f8             	mov    -0x8(%rbp),%eax
    1ae3:	0f 28 c8             	movaps %xmm0,%xmm1
    1ae6:	66 0f 6e c0          	movd   %eax,%xmm0
    1aea:	e8 3b fe ff ff       	callq  192a <getFloatCSum>
    1aef:	f3 0f 5a d0          	cvtss2sd %xmm0,%xmm2
    1af3:	f2 0f 11 55 e8       	movsd  %xmm2,-0x18(%rbp)
    1af8:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
    1afd:	8b 45 f8             	mov    -0x8(%rbp),%eax
    1b00:	48 8d 3d 23 fe ff ff 	lea    -0x1dd(%rip),%rdi        # 192a <getFloatCSum>
    1b07:	0f 28 c8             	movaps %xmm0,%xmm1
    1b0a:	66 0f 6e c0          	movd   %eax,%xmm0
    1b0e:	e8 fd fe ff ff       	callq  1a10 <getFloatFuncTime>
    1b13:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
    1b18:	48 8d 3d 2a 07 00 00 	lea    0x72a(%rip),%rdi        # 2249 <_IO_stdin_used+0x249>
    1b1f:	b8 02 00 00 00       	mov    $0x2,%eax
    1b24:	e8 97 f5 ff ff       	callq  10c0 <printf@plt>
    1b29:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
    1b2e:	8b 45 f8             	mov    -0x8(%rbp),%eax
    1b31:	0f 28 c8             	movaps %xmm0,%xmm1
    1b34:	66 0f 6e c0          	movd   %eax,%xmm0
    1b38:	e8 3d fe ff ff       	callq  197a <getFloatAsmSum>
    1b3d:	f3 0f 5a d8          	cvtss2sd %xmm0,%xmm3
    1b41:	f2 0f 11 5d e8       	movsd  %xmm3,-0x18(%rbp)
    1b46:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
    1b4b:	8b 45 f8             	mov    -0x8(%rbp),%eax
    1b4e:	48 8d 3d 25 fe ff ff 	lea    -0x1db(%rip),%rdi        # 197a <getFloatAsmSum>
    1b55:	0f 28 c8             	movaps %xmm0,%xmm1
    1b58:	66 0f 6e c0          	movd   %eax,%xmm0
    1b5c:	e8 af fe ff ff       	callq  1a10 <getFloatFuncTime>
    1b61:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
    1b66:	48 8d 3d fa 06 00 00 	lea    0x6fa(%rip),%rdi        # 2267 <_IO_stdin_used+0x267>
    1b6d:	b8 02 00 00 00       	mov    $0x2,%eax
    1b72:	e8 49 f5 ff ff       	callq  10c0 <printf@plt>
    1b77:	f3 0f 10 05 59 07 00 	movss  0x759(%rip),%xmm0        # 22d8 <_IO_stdin_used+0x2d8>
    1b7e:	00 
    1b7f:	f3 0f 11 45 f8       	movss  %xmm0,-0x8(%rbp)
    1b84:	f3 0f 10 05 50 07 00 	movss  0x750(%rip),%xmm0        # 22dc <_IO_stdin_used+0x2dc>
    1b8b:	00 
    1b8c:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
    1b91:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
    1b96:	8b 45 f8             	mov    -0x8(%rbp),%eax
    1b99:	0f 28 c8             	movaps %xmm0,%xmm1
    1b9c:	66 0f 6e c0          	movd   %eax,%xmm0
    1ba0:	e8 ad fd ff ff       	callq  1952 <getFloatCProd>
    1ba5:	f3 0f 5a e0          	cvtss2sd %xmm0,%xmm4
    1ba9:	f2 0f 11 65 e8       	movsd  %xmm4,-0x18(%rbp)
    1bae:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
    1bb3:	8b 45 f8             	mov    -0x8(%rbp),%eax
    1bb6:	48 8d 3d 95 fd ff ff 	lea    -0x26b(%rip),%rdi        # 1952 <getFloatCProd>
    1bbd:	0f 28 c8             	movaps %xmm0,%xmm1
    1bc0:	66 0f 6e c0          	movd   %eax,%xmm0
    1bc4:	e8 47 fe ff ff       	callq  1a10 <getFloatFuncTime>
    1bc9:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
    1bce:	48 8d 3d b0 06 00 00 	lea    0x6b0(%rip),%rdi        # 2285 <_IO_stdin_used+0x285>
    1bd5:	b8 02 00 00 00       	mov    $0x2,%eax
    1bda:	e8 e1 f4 ff ff       	callq  10c0 <printf@plt>
    1bdf:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
    1be4:	8b 45 f8             	mov    -0x8(%rbp),%eax
    1be7:	0f 28 c8             	movaps %xmm0,%xmm1
    1bea:	66 0f 6e c0          	movd   %eax,%xmm0
    1bee:	e8 d2 fd ff ff       	callq  19c5 <getFloatAsmProd>
    1bf3:	f3 0f 5a e8          	cvtss2sd %xmm0,%xmm5
    1bf7:	f2 0f 11 6d e8       	movsd  %xmm5,-0x18(%rbp)
    1bfc:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
    1c01:	8b 45 f8             	mov    -0x8(%rbp),%eax
    1c04:	48 8d 3d ba fd ff ff 	lea    -0x246(%rip),%rdi        # 19c5 <getFloatAsmProd>
    1c0b:	0f 28 c8             	movaps %xmm0,%xmm1
    1c0e:	66 0f 6e c0          	movd   %eax,%xmm0
    1c12:	e8 f9 fd ff ff       	callq  1a10 <getFloatFuncTime>
    1c17:	f2 0f 10 4d e8       	movsd  -0x18(%rbp),%xmm1
    1c1c:	48 8d 3d 80 06 00 00 	lea    0x680(%rip),%rdi        # 22a3 <_IO_stdin_used+0x2a3>
    1c23:	b8 02 00 00 00       	mov    $0x2,%eax
    1c28:	e8 93 f4 ff ff       	callq  10c0 <printf@plt>
    1c2d:	90                   	nop
    1c2e:	c9                   	leaveq 
    1c2f:	c3                   	retq   

0000000000001c30 <__libc_csu_init>:
    1c30:	f3 0f 1e fa          	endbr64 
    1c34:	41 57                	push   %r15
    1c36:	4c 8d 3d 4b 21 00 00 	lea    0x214b(%rip),%r15        # 3d88 <__frame_dummy_init_array_entry>
    1c3d:	41 56                	push   %r14
    1c3f:	49 89 d6             	mov    %rdx,%r14
    1c42:	41 55                	push   %r13
    1c44:	49 89 f5             	mov    %rsi,%r13
    1c47:	41 54                	push   %r12
    1c49:	41 89 fc             	mov    %edi,%r12d
    1c4c:	55                   	push   %rbp
    1c4d:	48 8d 2d 3c 21 00 00 	lea    0x213c(%rip),%rbp        # 3d90 <__do_global_dtors_aux_fini_array_entry>
    1c54:	53                   	push   %rbx
    1c55:	4c 29 fd             	sub    %r15,%rbp
    1c58:	48 83 ec 08          	sub    $0x8,%rsp
    1c5c:	e8 9f f3 ff ff       	callq  1000 <_init>
    1c61:	48 c1 fd 03          	sar    $0x3,%rbp
    1c65:	74 1f                	je     1c86 <__libc_csu_init+0x56>
    1c67:	31 db                	xor    %ebx,%ebx
    1c69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1c70:	4c 89 f2             	mov    %r14,%rdx
    1c73:	4c 89 ee             	mov    %r13,%rsi
    1c76:	44 89 e7             	mov    %r12d,%edi
    1c79:	41 ff 14 df          	callq  *(%r15,%rbx,8)
    1c7d:	48 83 c3 01          	add    $0x1,%rbx
    1c81:	48 39 dd             	cmp    %rbx,%rbp
    1c84:	75 ea                	jne    1c70 <__libc_csu_init+0x40>
    1c86:	48 83 c4 08          	add    $0x8,%rsp
    1c8a:	5b                   	pop    %rbx
    1c8b:	5d                   	pop    %rbp
    1c8c:	41 5c                	pop    %r12
    1c8e:	41 5d                	pop    %r13
    1c90:	41 5e                	pop    %r14
    1c92:	41 5f                	pop    %r15
    1c94:	c3                   	retq   
    1c95:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    1c9c:	00 00 00 00 

0000000000001ca0 <__libc_csu_fini>:
    1ca0:	f3 0f 1e fa          	endbr64 
    1ca4:	c3                   	retq   

Disassembly of section .fini:

0000000000001ca8 <_fini>:
    1ca8:	f3 0f 1e fa          	endbr64 
    1cac:	48 83 ec 08          	sub    $0x8,%rsp
    1cb0:	48 83 c4 08          	add    $0x8,%rsp
    1cb4:	c3                   	retq   
